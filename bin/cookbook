#!/usr/bin/env node

const path = require('path');
const fs = require('fs');
const yaml = require('js-yaml');
const usage = require('./usage');
const cookbook = require('../lib/cookbook');
const UsageError = require('../lib/usage-error');
const args = require('minimist')(process.argv.slice(2));

args.force = args.force || args.f;

if (args.help) {
  return usage();
}

const config = {};
const configFile = args._[0] || '.kube.js';

if (configFile) {
  const type = path.extname(configFile);
  const filePath = path.resolve(process.cwd(), configFile);
  try {
    if (type === '.js' || type === '.json') {
      Object.assign(config, require(filePath));
    } else if (type === '.yaml' || type === '.yml') {
      const content = fs.readFileSync(filePath).toString();
      Object.assign(config, yaml.safeLoad(content));
    }
  } catch (e) {
    console.log(e);
    throw new Error(`Could not read configuration from ${filePath}`);
  }
}

const defaults = {
  recipe: 'webapp'
};

const options = Object.assign(defaults, config, args);

cookbook(options)
  .catch(e => {
    if (e instanceof UsageError) {
      usage(e.message);
    } else {
      console.error(e);
    }
    process.exit(1);
  });
