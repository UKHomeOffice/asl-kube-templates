#!/usr/bin/env node

const path = require('path');
const Promise = require('bluebird');

const usage = require('./usage');
const loadData = require('../lib/utils/load-data');
const cookbook = require('../lib/cookbook');
const UsageError = require('../lib/usage-error');
const args = require('minimist')(process.argv.slice(2));

args.force = args.force || args.f;

if (args.help) {
  return usage();
}

args.config = [].concat(args.config).filter(Boolean);

const params = args.config.reduce((map, file) => {
  const name = path.basename(file, path.extname(file));
  return {
    ...map,
    [name]: loadData(path.resolve(process.cwd(), file))
  };
}, {});

const configFile = args._;

if (!configFile.length) {
  configFile.push('.kube.yaml');
}

const config = configFile.reduce((list, file) => {
  const filePath = path.resolve(process.cwd(), file);
  return list.concat(loadData(filePath, params));
}, []);

const defaults = {
  recipe: 'webapp'
};

Promise.mapSeries(config, c => {
  const options = Object.assign({}, defaults, c, args);
  if (config.length > 1) {
    options.prefix = options.prefix || `${options.name}-`;
  }
  return cookbook(options)
})
  .catch(e => {
    if (e instanceof UsageError) {
      usage(e.message);
    } else {
      console.error(e);
    }
    process.exit(1);
  });
